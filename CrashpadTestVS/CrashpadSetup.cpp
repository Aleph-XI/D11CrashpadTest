/*	
	Backtrace Crashpad Integration
	This template was generated by Visual Studio Backtrace Crashpad extensions.
	Please replace following values before you prepare release version of your application:
	* path to Crashpad database,
	* path to Crashpad handler,
	
	Please check generated precompile header.
	If you have more question please contact us!
	https://backtrace.io/
*/


#include "CrashpadSetup.hpp"
#include <client/crash_report_database.h>
#include <client/settings.h>
#include "client/crashpad_client.h"

namespace backtrace
{
	using namespace crashpad;
	static CrashpadClient client;

	bool initializeCrashpad() {
		std::map<std::string, std::string> annotations;
		std::vector<std::string> arguments;

		/*
		 * ENSURE THIS VALUE IS CORRECT.
		 *
		 * This is the directory you will use to store and queue crash data.
		 */
		std::wstring db_path(L"T:\\CrashpadDumps\\");

		/*
		 * ENSURE THIS VALUE IS CORRECT.
		 *
		 * Crashpad has the ability to support crashes both in-process and out-of-process.
		 * The out-of-process handler is significantly more robust than traditional in-process
		 * crash handlers. This path may be relative.
		 */
		std::wstring handler_path(L"C:\\Application\\crashpad\\crashpad-2021-07-16-release-x64-fd70c47fc249659db8a7345b00026b14a3963d6d\\bin\\crashpad_handler.exe");
		/*
		 * YOU MUST CHANGE THIS VALUE.
		 *
		 * This should point to your server dump submission port (labeled as "http/writer"
		 * in the listener configuration pane. Preferrably, the SSL enabled port should
		 * be used. If Backtrace is hosting your instance, the default port is 6098.
		 */
		std::string url("https://submit.backtrace.io/d11-test/8883b5799a7adec6c45a79c51caf89d8931127f02b2d230ccdac1d14732d51b9/minidump");
		/*
		 * REMOVE THIS FOR ACTUAL BUILD.
		 *
		 * We disable crashpad rate limiting for this example.
		 */
		arguments.push_back("--no-rate-limit");
		
		base::FilePath db(db_path);
		base::FilePath handler(handler_path);
		std::unique_ptr<CrashReportDatabase> database =
			crashpad::CrashReportDatabase::Initialize(db);

		if (database == nullptr || database->GetSettings() == NULL)
		{
			return false;
		}

		/* Enable automated uploads. */
		database->GetSettings()->SetUploadsEnabled(true);

		bool rc = client.StartHandler(handler,
			db,
			db,
			url,
			annotations,
			arguments,
			true,
			true);
		if (rc == false) 
		{
			return false;
		}

		/* Optional, wait for Crashpad to initialize. */
		return client.WaitForHandlerStart(INFINITE);
	}
}